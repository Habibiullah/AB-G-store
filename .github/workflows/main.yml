name: CI/CD - Multi Service to EC2

on:
  push:
    branches: [main]

permissions:
  contents: read
  id-token: write

jobs:
  # -------------------- BUILD & PUSH IMAGES --------------------
  # build-and-push:
  #   name: Build and Push Docker Images to ECR
  #   runs-on: ubuntu-latest

  #   steps:
  #     # 1Ô∏è‚É£ Checkout
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     # 2Ô∏è‚É£ Configure AWS credentials
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     # 3Ô∏è‚É£ Login to Amazon ECR
  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v2

  #     # ---------- FRONTEND ----------
  #     - name: Build and Push frontend
  #       run: |
  #         cd frontend
  #         docker build -t frontend .
  #         docker tag frontend:latest ${{ secrets.ECR_REGISTRY }}/frontend:latest
  #         docker push ${{ secrets.ECR_REGISTRY }}/frontend:latest

  #     # ---------- AUTH ----------
  #     - name: Build and Push auth
  #       run: |
  #         cd services/auth
  #         docker build -t auth .
  #         docker tag auth:latest ${{ secrets.ECR_REGISTRY }}/auth:latest
  #         docker push ${{ secrets.ECR_REGISTRY }}/auth:latest

  #     # ---------- EMPLOYEES ----------
  #     - name: Build and Push employees
  #       run: |
  #         cd services/employees
  #         docker build -t employees .
  #         docker tag employees:latest ${{ secrets.ECR_REGISTRY }}/employees:latest
  #         docker push ${{ secrets.ECR_REGISTRY }}/employees:latest

  #     # ---------- ATTENDANCE ----------
  #     - name: Build and Push attendance
  #       run: |
  #         cd services/attendance
  #         docker build -t attendance .
  #         docker tag attendance:latest ${{ secrets.ECR_REGISTRY }}/attendance:latest
  #         docker push ${{ secrets.ECR_REGISTRY }}/attendance:latest

  #     # ---------- PAYROLL ----------
  #     - name: Build and Push payroll
  #       run: |
  #         cd services/payroll
  #         docker build -t payroll .
  #         docker tag payroll:latest ${{ secrets.ECR_REGISTRY }}/payroll:latest
  #         docker push ${{ secrets.ECR_REGISTRY }}/payroll:latest

  #     # ---------- GATEWAY ----------
  #     - name: Build and Push gateway
  #       run: |
  #         cd services/gateway
  #         docker build -t gateway .
  #         docker tag gateway:latest ${{ secrets.ECR_REGISTRY }}/gateway:latest
  #         docker push ${{ secrets.ECR_REGISTRY }}/gateway:latest

  # -------------------- DEPLOY TO EC2 --------------------


  deploy:
    runs-on: ubuntu-latest
    env:
      # Adjust as you wish; these are used on the REMOTE host via heredoc
      AWS_REGION: ap-southeast-1
      AWS_ACCOUNT_ID: 851725361780

    steps:
      - name: Deploy via single SSH session
        shell: bash
        run: |
          set -Eeuo pipefail

          # --- Prepare SSH (in this same step) ---
          mkdir -p ~/.ssh
          printf '%s' "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_ci
          chmod 400 ~/.ssh/id_ci
          # Strict host key checking with prefetch:
          ssh-keyscan -H "${{ secrets.EC2_HOST }}" >> ~/.ssh/known_hosts

          # --- Hardened SSH options ---
          SSH_USER="${{ secrets.EC2_USER || 'ubuntu' }}"
          SSH_HOST="${{ secrets.EC2_HOST }}"
          SSH_OPTS="-o BatchMode=yes -o IdentitiesOnly=yes -o StrictHostKeyChecking=yes -i ~/.ssh/id_ci -tt"

          echo "üîå Checking SSH reachability (with retries)..."
          for i in {1..5}; do
            if ssh $SSH_OPTS "${SSH_USER}@${SSH_HOST}" 'true' 2>/dev/null; then
              echo "‚úÖ SSH reachable."
              break
            fi
            echo "SSH attempt $i failed; retrying in 5s..."
            sleep 5
            if [[ $i -eq 5 ]]; then
              echo "‚ùå Could not reach EC2 via SSH after 5 attempts."
              exit 1
            fi
          done

          # --- Single SSH session runs EVERYTHING below ---
          ssh $SSH_OPTS "${SSH_USER}@${SSH_HOST}" <<'REMOTE_EOF'
          set -Eeuo pipefail
          trap 'echo "‚ùå Remote deploy failed at line $LINENO"; exit 1' ERR

          echo "‚úÖ Connected to EC2."

          # --- Config ---
          AWS_REGION="${AWS_REGION:-ap-southeast-1}"
          ACCOUNT_ID="${AWS_ACCOUNT_ID:-851725361780}"
          ECR_REGISTRY="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

          echo "üîß Versions:"
          command -v docker >/dev/null && docker --version || { echo "Docker missing"; exit 1; }
          command -v aws >/dev/null && aws --version || { echo "AWS CLI missing"; exit 1; }

          echo "üîê Logging into ECR..."
          aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$ECR_REGISTRY"

          echo "üßπ Removing old containers (if any)..."
          docker rm -f frontend auth employees attendance payroll gateway 2>/dev/null || true

          echo "üï∏Ô∏è Ensuring Docker network exists..."
          docker network create appnet 2>/dev/null || true

          echo "‚¨áÔ∏è Pulling latest images..."
          for service in frontend auth employees attendance payroll gateway; do
            echo "üîÑ Pulling $ECR_REGISTRY/$service:latest ..."
            # Small retry for pulls
            for j in 1 2 3; do
              if docker pull "$ECR_REGISTRY/$service:latest"; then
                break
              fi
              echo "Pull failed for $service (attempt $j). Retrying in 3s..."
              sleep 3
              if [[ $j -eq 3 ]]; then
                echo "‚ùå Pull failed for $service after 3 attempts."
                exit 1
              fi
            done
          done

          echo "üö¢ Starting containers..."
          docker run -d --name frontend   --network appnet -p 5173:5173 --restart unless-stopped "$ECR_REGISTRY/frontend:latest"
          docker run -d --name gateway    --network appnet -p 8000:8000 --restart unless-stopped "$ECR_REGISTRY/gateway:latest"
          for service in auth employees attendance payroll; do
            docker run -d --name "$service" --network appnet --restart unless-stopped "$ECR_REGISTRY/$service:latest"
          done

          echo "üß™ Health check (basic):"
          # Optional: curl your gateway if reachable locally or via a known endpoint
          # curl -fsS http://localhost:8000/healthz || { echo "Gateway health check failed"; exit 1; }

          echo "‚úÖ Deployment completed successfully!"
          REMOTE_EOF

    