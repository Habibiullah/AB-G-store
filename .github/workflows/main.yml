name: CI/CD - Multi Service to EC2

on:
  push:
    branches: [main]

permissions:
  contents: read
  id-token: write

jobs:
  # -------------------- BUILD & PUSH IMAGES --------------------
  # build-and-push:
  #   name: Build and Push Docker Images to ECR
  #   runs-on: ubuntu-latest

  #   steps:
  #     # 1Ô∏è‚É£ Checkout
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     # 2Ô∏è‚É£ Configure AWS credentials
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     # 3Ô∏è‚É£ Login to Amazon ECR
  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v2

  #     # ---------- FRONTEND ----------
  #     - name: Build and Push frontend
  #       run: |
  #         cd frontend
  #         docker build -t frontend .
  #         docker tag frontend:latest ${{ secrets.ECR_REGISTRY }}/frontend:latest
  #         docker push ${{ secrets.ECR_REGISTRY }}/frontend:latest

  #     # ---------- AUTH ----------
  #     - name: Build and Push auth
  #       run: |
  #         cd services/auth
  #         docker build -t auth .
  #         docker tag auth:latest ${{ secrets.ECR_REGISTRY }}/auth:latest
  #         docker push ${{ secrets.ECR_REGISTRY }}/auth:latest

  #     # ---------- EMPLOYEES ----------
  #     - name: Build and Push employees
  #       run: |
  #         cd services/employees
  #         docker build -t employees .
  #         docker tag employees:latest ${{ secrets.ECR_REGISTRY }}/employees:latest
  #         docker push ${{ secrets.ECR_REGISTRY }}/employees:latest

  #     # ---------- ATTENDANCE ----------
  #     - name: Build and Push attendance
  #       run: |
  #         cd services/attendance
  #         docker build -t attendance .
  #         docker tag attendance:latest ${{ secrets.ECR_REGISTRY }}/attendance:latest
  #         docker push ${{ secrets.ECR_REGISTRY }}/attendance:latest

  #     # ---------- PAYROLL ----------
  #     - name: Build and Push payroll
  #       run: |
  #         cd services/payroll
  #         docker build -t payroll .
  #         docker tag payroll:latest ${{ secrets.ECR_REGISTRY }}/payroll:latest
  #         docker push ${{ secrets.ECR_REGISTRY }}/payroll:latest

  #     # ---------- GATEWAY ----------
  #     - name: Build and Push gateway
  #       run: |
  #         cd services/gateway
  #         docker build -t gateway .
  #         docker tag gateway:latest ${{ secrets.ECR_REGISTRY }}/gateway:latest
  #         docker push ${{ secrets.ECR_REGISTRY }}/gateway:latest

  # -------------------- DEPLOY TO EC2 --------------------



  deploy:
    name: Deploy on EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (optional)
        uses: actions/checkout@v4

      - name: Prepare SSH key
        run: |
          mkdir -p ~/.ssh
          # Write the key EXACTLY as stored in the secret and strip CRLF just in case
          printf '%s' "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # Preload host key to avoid interactive prompt
          ssh-keyscan -H "${{ secrets.EC2_HOST }}" >> ~/.ssh/known_hosts

      - name: Test SSH connectivity
        run: |
          ssh -o StrictHostKeyChecking=yes -i ~/.ssh/id_rsa "ubuntu@${{ secrets.EC2_HOST }}" 'echo "‚úÖ Connected to EC2 via SSH"'

      - name: SSH and Deploy Containers
        run: |
          ssh -tt -o StrictHostKeyChecking=yes -i ~/.ssh/id_rsa "ubuntu@${{ secrets.EC2_HOST }}" <<'EOF'
          set -euo pipefail
          set -x

          echo "‚úÖ Connected to EC2."

          AWS_REGION="${AWS_REGION:-ap-southeast-1}"
          ACCOUNT_ID="${ACCOUNT_ID:-851725361780}"
          ECR_REGISTRY="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

          echo "üîê Logging into ECR..."
          aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$ECR_REGISTRY"

          echo "üßπ Cleaning old containers..."
          docker rm -f frontend auth employees attendance payroll gateway 2>/dev/null || true

          echo "üï∏Ô∏è Creating Docker network..."
          docker network create appnet 2>/dev/null || true

          echo "‚¨áÔ∏è Pulling latest images..."
          for service in frontend auth employees attendance payroll gateway; do
            echo "üîÑ Pulling $ECR_REGISTRY/$service:latest ..."
            docker pull "$ECR_REGISTRY/$service:latest"
          done

          echo "üö¢ Running updated containers..."
          docker run -d --name frontend   --network appnet -p 5173:5173 --restart unless-stopped "$ECR_REGISTRY/frontend:latest"
          docker run -d --name gateway    --network appnet -p 8000:8000 --restart unless-stopped "$ECR_REGISTRY/gateway:latest"
          for service in auth employees attendance payroll; do
            docker run -d --name "$service" --network appnet --restart unless-stopped "$ECR_REGISTRY/$service:latest"
          done

          echo "‚úÖ Deployment completed successfully!"
          EOF

    