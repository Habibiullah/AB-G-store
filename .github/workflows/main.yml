name: frontend

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # ---------- FRONTEND ----------
      - name: Build, Tag, and Push frontend image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          cd frontend
          docker build -t $ECR_REPOSITORY .
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # ---------- AUTH ----------
      - name: Build, Tag, and Push auth image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: auth
        run: |
          cd ./services/auth
          docker build -t $ECR_REPOSITORY .
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # ---------- EMPLOYEES ----------
      - name: Build, Tag, and Push employees image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: employees
        run: |
          cd ./services/employees
          docker build -t $ECR_REPOSITORY .
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # ---------- ATTENDANCE ----------
      - name: Build, Tag, and Push attendance image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: attendance
        run: |
          cd ./services/attendance
          docker build -t $ECR_REPOSITORY .
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # ---------- PAYROLL ----------
      - name: Build, Tag, and Push payroll image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: payroll
        run: |
          cd ./services/payroll
          docker build -t $ECR_REPOSITORY .
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # ---------- GATEWAY ----------
      - name: Build, Tag, and Push gateway image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: gateway
        run: |
          cd ./services/gateway
          docker build -t $ECR_REPOSITORY .
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # ---------- DEPLOYMENT ----------
      - name: Deploy on EC2 via SSH (pull from ECR and run container)
        env:
          ECR_REGISTRY: 851725361780.dkr.ecr.ap-southeast-1.amazonaws.com
          ECR_IMAGE: 851725361780.dkr.ecr.ap-southeast-1.amazonaws.com/frontend:latest
          EC2_USER: ubuntu
          EC2_HOST: 13.229.231.109
          AWS_REGION: ap-southeast-1
        run: |
          set -euo pipefail

          # Decode SSH key from base64
          echo "${{ secrets.EC2_SSH_KEY_BASE64 }}" | base64 --decode > AB-G-key.pem
          chmod 400 AB-G-key.pem

          # Pipe ECR password into remote docker login
          aws ecr get-login-password --region "$AWS_REGION" | \
          ssh -o StrictHostKeyChecking=no -i "AB-G-key.pem" "$EC2_USER@$EC2_HOST" bash -s -- "$ECR_REGISTRY" "$ECR_IMAGE" "$AWS_REGION" <<'REMOTE_SCRIPT'
          set -euo pipefail

          ECR_REGISTRY="$1"
          ECR_IMAGE="$2"
          AWS_REGION="$3"

          echo "✅ SSH connected successfully!"

          # Ensure docker exists
          if ! command -v docker >/dev/null 2>&1; then
            echo "❌ Docker not installed on remote host." >&2
            exit 1
          fi

          # Create network and remove old container
          docker network create appnet || true
          docker rm -f frontend || true

          # Login to ECR (password piped via SSH stdin)
          docker login --username AWS --password-stdin "$ECR_REGISTRY"

          # Pull and run container
          docker pull "$ECR_IMAGE"
          docker run -d \
            --name frontend \
            --network appnet \
            --restart unless-stopped \
            -p 5173:5173 \
            "$ECR_IMAGE"

          echo "✅ Deployment successful: $ECR_IMAGE"
REMOTE_SCRIPT
