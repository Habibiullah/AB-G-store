name: CI/CD - Multi Service to EC2

on:
  push:
    branches: [main]

permissions:
  contents: read
  id-token: write

jobs:
  # -------------------- BUILD & PUSH IMAGES --------------------
  # build-and-push:
  #   name: Build and Push Docker Images to ECR
  #   runs-on: ubuntu-latest

  #   steps:
  #     # 1️⃣ Checkout
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     # 2️⃣ Configure AWS credentials
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     # 3️⃣ Login to Amazon ECR
  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v2

  #     # ---------- FRONTEND ----------
  #     - name: Build and Push frontend
  #       run: |
  #         cd frontend
  #         docker build -t frontend .
  #         docker tag frontend:latest ${{ secrets.ECR_REGISTRY }}/frontend:latest
  #         docker push ${{ secrets.ECR_REGISTRY }}/frontend:latest

  #     # ---------- AUTH ----------
  #     - name: Build and Push auth
  #       run: |
  #         cd services/auth
  #         docker build -t auth .
  #         docker tag auth:latest ${{ secrets.ECR_REGISTRY }}/auth:latest
  #         docker push ${{ secrets.ECR_REGISTRY }}/auth:latest

  #     # ---------- EMPLOYEES ----------
  #     - name: Build and Push employees
  #       run: |
  #         cd services/employees
  #         docker build -t employees .
  #         docker tag employees:latest ${{ secrets.ECR_REGISTRY }}/employees:latest
  #         docker push ${{ secrets.ECR_REGISTRY }}/employees:latest

  #     # ---------- ATTENDANCE ----------
  #     - name: Build and Push attendance
  #       run: |
  #         cd services/attendance
  #         docker build -t attendance .
  #         docker tag attendance:latest ${{ secrets.ECR_REGISTRY }}/attendance:latest
  #         docker push ${{ secrets.ECR_REGISTRY }}/attendance:latest

  #     # ---------- PAYROLL ----------
  #     - name: Build and Push payroll
  #       run: |
  #         cd services/payroll
  #         docker build -t payroll .
  #         docker tag payroll:latest ${{ secrets.ECR_REGISTRY }}/payroll:latest
  #         docker push ${{ secrets.ECR_REGISTRY }}/payroll:latest

  #     # ---------- GATEWAY ----------
  #     - name: Build and Push gateway
  #       run: |
  #         cd services/gateway
  #         docker build -t gateway .
  #         docker tag gateway:latest ${{ secrets.ECR_REGISTRY }}/gateway:latest
  #         docker push ${{ secrets.ECR_REGISTRY }}/gateway:latest

  # -------------------- DEPLOY TO EC2 --------------------


  # deploy:
  #   runs-on: ubuntu-latest
  #   env:
  #     # Adjust as you wish; these are used on the REMOTE host via heredoc
  #     AWS_REGION: ${{ secrets.AWS_REGION}}
  #     AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

  #   steps:

  #     - name: Configure AWS CLI
  #       run: |
  #         mkdir -p ~/.aws
  #         echo "[default]" > ~/.aws/credentials
  #         echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
  #         echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
  #         echo "[default]" > ~/.aws/config
  #         echo "region=${{ secrets.AWS_REGION }}" >> ~/.aws/config

  #     - name: Set up SSH
  #       run: |
  #         mkdir -p ~/.ssh
  #         echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
  #         chmod 600 ~/.ssh/id_rsa
  #         ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

  #     - name: Deploy to EC2
  #       run: |
  #         ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
  #         set -e
  #         set -x


  #         # Login to AWS ECR and pull the latest image
  #         aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.ECR_URL }}
  #         sudo docker pull ${{ secrets.ECR_URL }}:latest


  #         #FRONTEND-container

  #         # Stop and remove the existing container if it exists
  #         sudo docker stop frontenfd || true
  #         sudo docker rm frontend || true

  #         # Ensure Docker network exists
  #         sudo docker network inspect appnet >/dev/null 2>&1 || sudo docker network create appnet
  #         # Run new container without environment variables first
  #         sudo docker run -d --name frontend -p 5173:5173 --network appnet ${{ secrets.ECR_URL }}:latest

  #         # Create environment file inside EC2
  #         cat <<EOT > /home/ubuntu/.env
  #         VITE_API_URL=${{ secrets.VITE_API_URL }}
  #         EOT

  #         # Copy environment file into the running container
  #         sudo docker cp /home/ubuntu/.env frontend:/app/.env

  #         # Restart the container to load environment variables
  #         sudo docker restart frontend

  #         sudo docker image prune -af
  #         EOF


  #           # mongo-db deploy


  #  deploy:
  #   runs-on: ubuntu-latest
  #   env:
  #     # Adjust as you wish; these are used on the REMOTE host via heredoc
  #     AWS_REGION: ${{ secrets.AWS_REGION}}
  #     AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

  #   steps:

  #     - name: Configure AWS CLI
  #       run: |
  #         mkdir -p ~/.aws
  #         echo "[default]" > ~/.aws/credentials
  #         echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
  #         echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
  #         echo "[default]" > ~/.aws/config
  #         echo "region=${{ secrets.AWS_REGION }}" >> ~/.aws/config

  #     - name: Set up SSH
  #       run: |
  #         mkdir -p ~/.ssh
  #         echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
  #         chmod 600 ~/.ssh/id_rsa
  #         ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

  #     - name: Deploy to EC2
  #       run: |
  #         ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
  #         set -e
  #         set -x


        


  #         #mongodb-container

  #         # Stop and remove the existing container if it exists
  #         sudo docker stop mongo || true
  #         sudo docker rm mongo || true

  #         # Ensure Docker volume exists
  #         sudo mkdir -p /home/ubuntu/mongo-data
  #         sudo chown -R 999:9000 /home/ubuntu/mongo-data

  #         # Ensure Docker network exists
  #         sudo docker network inspect appnet >/dev/null 2>&1 || sudo docker network create appnet
  #         # Run new container without environment variables first
  #         sudo docker run -d --name mongo -p 27017:27017 -e MONGO_INITDB_ROOT_USERNAME=root -e MONGO_INITDB_ROOT_PASSWORD=rootpass --network appnet -v /home/ubuntu/mongo-data:/data/db mongo:7

          

          

  #         # Restart the container to load environment variables
  #         sudo docker restart mongo

  #         sudo docker image prune -af
  #         EOF

            
            
            # -------------Deploy auth --------

    deploy:
      runs-on: ubuntu-latest
      env:
        # Adjust as you wish; these are used on the REMOTE host via heredoc
        AWS_REGION: ${{ secrets.AWS_REGION}}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

      steps:

        - name: Configure AWS CLI
          run: |
            mkdir -p ~/.aws
            echo "[default]" > ~/.aws/credentials
            echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
            echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
            echo "[default]" > ~/.aws/config
            echo "region=${{ secrets.AWS_REGION }}" >> ~/.aws/config

        - name: Set up SSH
          run: |
            mkdir -p ~/.ssh
            echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

        - name: Deploy to EC2
          run: |
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            set -x


            # Login to AWS ECR and pull the latest image
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.ECR_URL }}
            sudo docker pull ${{ secrets.ECR_URL }}:latest


            #AUTH-container

            # Stop and remove the existing container if it exists
            sudo docker stop auth || true
            sudo docker rm auth || true

            # Ensure Docker network exists
            sudo docker network inspect appnet >/dev/null 2>&1 || sudo docker network create appnet
            # Run new container without environment variables first
            sudo docker run -d --name auth -p 4001:4001 --network appnet ${{ secrets.AUTH_ECR_URL }}:latest

            # Create environment file inside EC2
            cat <<EOT > /home/ubuntu/.env
            PORT_AUTH=${{ secrets.PORT_AUTH }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
            MONGO_URI=${{ secrets.MONGO_URI }}

            EOT

            # Copy environment file into the running container
            sudo docker cp /home/ubuntu/.env auth:/app/.env

            # Restart the container to load environment variables
            sudo docker restart auth

            sudo docker image prune -af
            EOF




            #Employees-container

            # Stop and remove the existing container if it exists
            sudo docker stop employees || true
            sudo docker rm employees || true

            # Ensure Docker network exists
            sudo docker network inspect appnet >/dev/null 2>&1 || sudo docker network create appnet
            # Run new container without environment variables first
            sudo docker run -d --name employees -p 4002:4002 --network appnet ${{ secrets.EMPLOYEES_ECR_URL }}:latest

            # Create environment file inside EC2
            cat <<EOT > /home/ubuntu/.env
            PORT_EMPLOYEES=${{ secrets.PORT_EMPLOYEES }}
            CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
            MONGO_URI=${{ secrets.MONGO_URI }}

            EOT

            # Copy environment file into the running container
            sudo docker cp /home/ubuntu/.env employees:/app/.env

            # Restart the container to load environment variables
            sudo docker restart employees

            sudo docker image prune -af
            EOF


            #ATTENDANCE-container

            # Stop and remove the existing container if it exists
            sudo docker stop attendance || true
            sudo docker rm attendance || true

            # Ensure Docker network exists
            sudo docker network inspect appnet >/dev/null 2>&1 || sudo docker network create appnet
            # Run new container without environment variables first
            sudo docker run -d --name attendance -p 4003:4003 --network appnet ${{ secrets.ATTENDANCE_ECR_URL }}:latest

            # Create environment file inside EC2
            cat <<EOT > /home/ubuntu/.env
            PORT_ATTENDANCE=${{ secrets.PORT_ATTENDANCE }}
            CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
            MONGO_URI=${{ secrets.MONGO_URI }}

            EOT

            # Copy environment file into the running container
            sudo docker cp /home/ubuntu/.env attendance:/app/.env

            # Restart the container to load environment variables
            sudo docker restart attendance

            sudo docker image prune -af
            EOF


            #PAYROLL-container

            # Stop and remove the existing container if it exists
            sudo docker stop payroll || true
            sudo docker rm payroll || true

            # Ensure Docker network exists
            sudo docker network inspect appnet >/dev/null 2>&1 || sudo docker network create appnet
            # Run new container without environment variables first
            sudo docker run -d --name payroll -p 4004:4004 --network appnet ${{ secrets.PAYROLL_ECR_URL }}:latest

            # Create environment file inside EC2
            cat <<EOT > /home/ubuntu/.env
            PORT_PAYROLL=${{ secrets.PORT_PAYROLL }}
            CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
            MONGO_URI=${{ secrets.MONGO_URI }}

            EOT

            # Copy environment file into the running container
            sudo docker cp /home/ubuntu/.env payroll:/app/.env

            # Restart the container to load environment variables
            sudo docker restart payroll

            sudo docker image prune -af
            EOF

            #GATEWAY-container

            # Stop and remove the existing container if it exists
            sudo docker stop gateway || true
            sudo docker rm gateway || true

            # Ensure Docker network exists
            sudo docker network inspect appnet >/dev/null 2>&1 || sudo docker network create appnet
            # Run new container without environment variables first
            sudo docker run -d --name gateway -p 8080:8080 --network appnet ${{ secrets.GATEWAY_ECR_URL }}:latest

            # Create environment file inside EC2
            cat <<EOT > /home/ubuntu/.env
            PORT_GATEWAY=${{ secrets.PORT_GATEWAY }}
            CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
            AUTH_URL=${{ secrets.AUTH_URL }}
            EMPLOYEES_URL=${{ secrets.EMPLOYEES_URL }}
            ATTENDANCE_URL=${{ secrets.ATTENDANCE_URL }}
            PAYROLL_URL=${{ secrets.PAYROLL_URL }}

            EOT

            # Copy environment file into the running container
            sudo docker cp /home/ubuntu/.env gateway:/app/.env

            # Restart the container to load environment variables
            sudo docker restart gateway

            sudo docker image prune -af
            EOF