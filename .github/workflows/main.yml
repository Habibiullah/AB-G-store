name: AB-G-store
on:
  push: 
    branches: [main]

permissions:
  contents: read
  id-token: write

jobs:
          #---------image build and push-----------
  build-push:
    name: Build and push Docker images to ECR
    runs-on: ubuntu-latest

    steps:
                          #--------------check code -------------
      - name: checkout code
        uses: actions/checkout@v4
                   #-----------------configure aws credentials
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
                   #------------------Login to Amazon ECR-------------
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
                   #------------------- frontend image build and push-----------
      - name: Build and push frontend
        run: |
          docker build -t frontend ./frontend
          docker tag frontend:latest ${{ secrets.ECR_REGISTRY }}/frontend:latest
          docker push ${{ secrets.ECR_REGISTRY }}/frontend:latest
                     
                    #---------------------- auth image build and push------------------

      - name: Build and push auth
        run: |
          docker build -t auth ./services/auth
          docker tag auth:latest ${{ secrets.ECR_REGISTRY }}/auth:latest
          docker push ${{ secrets.ECR_REGISTRY }}/auth:latest
          
                  #------------------------- employees image build and push-------------
      - name: Build and push employees
        run: |
          docker build -t employees ./services/employees
          docker tag employees:latest ${{ secrets.ECR_REGISTRY }}/employees:latest
          docker push ${{ secrets.ECR_REGISTRY }}/employees:latest
         
                        #---------------------------- attendance image build and push--------------
      - name: Build and push attendance
        run: |
          docker build -t attendance ./services/attendance
          docker tag attendance:latest ${{ secrets.ECR_REGISTRY }}/attendance:latest
          docker push ${{ secrets.ECR_REGISTRY }}/attendance:latest

                   #------------------------------payroll image build and push -------------------
      - name: Build and push payroll
        run: |
          docker build -t payroll ./services/payroll
          docker tag payroll:latest ${{ secrets.ECR_REGISTRY }}/payroll:latest
          docker push ${{ secrets.ECR_REGISTRY }}/payroll:latest   
                     #-----------------------------  gateway image build and push---------------------
      - name: Build and push gateway
        run: |
          docker build -t gateway ./services/gateway
          docker tag gateway:latest ${{ secrets.ECR_REGISTRY }}/gateway:latest
          docker push ${{ secrets.ECR_REGISTRY }}/gateway:latest                   
#-----------------------------------------------deploy to ec2------------------

#---------------------------------------pull and deploy--------------
  deploy:
    runs-on: ubuntu-latest
    needs: build-push
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}


    steps:
      - name: Configure AWS CLI
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "[default]" > ~/.aws/config
          echo "region=${{ secrets.AWS_REGION }}" >> ~/.aws/config  

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          set -e
          set -x


          # Login to AWS ECR and pull the latest image
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.ECR_URL }}
          sudo docker pull ${{ secrets.ECR_URL }}:latest


          #FRONTEND-container

          # Stop and remove the existing container if it exists
          sudo docker stop frontend || true
          sudo docker rm frontend || true

          # Ensure Docker network exists
          sudo docker network inspect appnet >/dev/null 2>&1 || sudo docker network create appnet
          # Run new container without environment variables first
          sudo docker run -d --name frontend -p 5173:5173 --network appnet ${{ secrets.ECR_URL }}:latest

          # Create environment file inside EC2
          cat <<EOT > /home/ubuntu/.env
          VITE_API_URL=${{ secrets.VITE_API_URL }}
          EOT

          # Copy environment file into the running container
          sudo docker cp /home/ubuntu/.env frontend:/app/.env

          # Restart the container to load environment variables
          sudo docker restart frontend

          sudo docker image prune -af
          EOF


            # mongo-db deploy