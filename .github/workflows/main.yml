name: frontend
on:
  push:
    branches: 
      - main

jobs:
   build-and-deploy:
     runs-on: ubuntu-latest
     steps:
       - name: checkout code
         uses: actions/checkout@v4

       - name: configure AWS credentials
         uses: aws-actions/configure-aws-credentials@v4
         with:
           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
           aws-region: ${{ secrets.AWS_REGION }}

       - name: Login to Amazon ECR
         id: login-ecr
         uses: aws-actions/amazon-ecr-login@v2

       - name: Build, Tag, and Push image
         env:
           ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
           ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
         run: |
           cd frontend
           docker build -t $ECR_REPOSITORY .
           docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
           docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest




       - name: auth build, Tag, and Push image
         env:
           ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
           ECR_REPOSITORY: auth
         run: |
           cd ./services/auth
           docker build -t $ECR_REPOSITORY .
           docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
           docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest



       - name: employees Build, Tag, and Push image
         env:
           ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
           ECR_REPOSITORY: employees
         run: |
           cd ./services/employees
           docker build -t $ECR_REPOSITORY .
           docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
           docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest


       - name: attendance Build, Tag, and Push image
         env:
           ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
           ECR_REPOSITORY: attendance
         run: |
           cd ./services/attendance
           docker build -t $ECR_REPOSITORY .
           docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
           docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest




       - name: payroll Build, Tag, and Push image
         env:
           ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
           ECR_REPOSITORY: payroll
         run: |
           cd ./services/payroll
           docker build -t $ECR_REPOSITORY .
           docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
           docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest



       - name: gateway Build, Tag, and Push image
         env:
           ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
           ECR_REPOSITORY: gateway
         run: |
           cd ./services/gateway
           docker build -t $ECR_REPOSITORY .
           docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
           docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

 

       - name: Deploy on EC2 via SSH
         run: |
          echo "${{ secrets.EC2_SSH_KEY_BASE64 }}" | base64 --decode > AB-G-key.pem
          chmod 400 AB-G-key.pem

          ssh -o StrictHostKeyChecking=no -i "AB-G-key.pem" ubuntu@13.229.231.109 << 'EOF'
          echo "âœ… SSH connected successfully!"

          cd /home/ubuntu/app

          # Configure AWS CLI credentials
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set default.region "ap-southeast-1"

          # Docker setup
          docker network create appnet || true
          docker rm -f frontend || true

          aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 851725361780.dkr.ecr.ap-southeast-1.amazonaws.com

          docker pull 851725361780.dkr.ecr.ap-southeast-1.amazonaws.com/frontend:latest

          docker run -d --name frontend --network appnet -p 5173:5173 851725361780.dkr.ecr.ap-southeast-1.amazonaws.com/frontend:latest
        
          EOF
       



 









         

