name: CI/CD - Multi Service to EC2

on:
  push:
    branches: [main]

permissions:
  contents: read
  id-token: write

jobs:
  # -------------------- BUILD & PUSH IMAGES --------------------
  # build-and-push:
  #   name: Build and Push Docker Images to ECR
  #   runs-on: ubuntu-latest

  #   steps:
  #     # 1️⃣ Checkout
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     # 2️⃣ Configure AWS credentials
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     # 3️⃣ Login to Amazon ECR
  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v2

  #     # ---------- FRONTEND ----------
  #     - name: Build and Push frontend
  #       run: |
  #         cd frontend
  #         docker build -t frontend .
  #         docker tag frontend:latest ${{ secrets.ECR_REGISTRY }}/frontend:latest
  #         docker push ${{ secrets.ECR_REGISTRY }}/frontend:latest

  #     # ---------- AUTH ----------
  #     - name: Build and Push auth
  #       run: |
  #         cd services/auth
  #         docker build -t auth .
  #         docker tag auth:latest ${{ secrets.ECR_REGISTRY }}/auth:latest
  #         docker push ${{ secrets.ECR_REGISTRY }}/auth:latest

  #     # ---------- EMPLOYEES ----------
  #     - name: Build and Push employees
  #       run: |
  #         cd services/employees
  #         docker build -t employees .
  #         docker tag employees:latest ${{ secrets.ECR_REGISTRY }}/employees:latest
  #         docker push ${{ secrets.ECR_REGISTRY }}/employees:latest

  #     # ---------- ATTENDANCE ----------
  #     - name: Build and Push attendance
  #       run: |
  #         cd services/attendance
  #         docker build -t attendance .
  #         docker tag attendance:latest ${{ secrets.ECR_REGISTRY }}/attendance:latest
  #         docker push ${{ secrets.ECR_REGISTRY }}/attendance:latest

  #     # ---------- PAYROLL ----------
  #     - name: Build and Push payroll
  #       run: |
  #         cd services/payroll
  #         docker build -t payroll .
  #         docker tag payroll:latest ${{ secrets.ECR_REGISTRY }}/payroll:latest
  #         docker push ${{ secrets.ECR_REGISTRY }}/payroll:latest

  #     # ---------- GATEWAY ----------
  #     - name: Build and Push gateway
  #       run: |
  #         cd services/gateway
  #         docker build -t gateway .
  #         docker tag gateway:latest ${{ secrets.ECR_REGISTRY }}/gateway:latest
  #         docker push ${{ secrets.ECR_REGISTRY }}/gateway:latest

  # -------------------- DEPLOY TO EC2 --------------------


 deploy:
  name: Deploy on EC2
  runs-on: ubuntu-latest
  env:
    AWS_REGION: ap-southeast-1
    EC2_USER: ubuntu
    EC2_HOST: 13.229.231.109
    ECR_REGISTRY: 851725361780.dkr.ecr.ap-southeast-1.amazonaws.com

  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH key
      run: |
        printf "%s" "${{ secrets.EC2_SSH_KEY }}" > AB-G-key.pem
        chmod 400 AB-G-key.pem
        echo "🔑 SSH key configured"

    - name: SSH and Deploy Containers
      run: |
        set -euo pipefail
        echo "🚀 Starting EC2 Deployment..."
        ssh -o StrictHostKeyChecking=no -i "AB-G-key.pem" ubuntu@13.229.231.109 bash -s <<'EOF'
        set -euo pipefail
        echo "✅ Connected to EC2."

        AWS_REGION="ap-southeast-1"
        ECR_REGISTRY="851725361780.dkr.ecr.ap-southeast-1.amazonaws.com"

        echo "🔐 Logging into ECR..."
        aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$ECR_REGISTRY"

        echo "🧹 Cleaning old containers..."
        docker stop frontend auth employees attendance payroll gateway 2>/dev/null || true
        docker rm frontend auth employees attendance payroll gateway 2>/dev/null || true

        echo "🕸️ Creating Docker network..."
        docker network create appnet 2>/dev/null || true

        echo "⬇️ Pulling latest images..."
        for service in frontend auth employees attendance payroll gateway; do
          echo "🔄 Pulling $ECR_REGISTRY/$service:latest ..."
          docker pull "$ECR_REGISTRY/$service:latest"
        done

        echo "🚢 Running updated containers..."
        docker run -d --name frontend   --network appnet -p 5173:5173 --restart unless-stopped "$ECR_REGISTRY/frontend:latest"
        docker run -d --name auth       --network appnet --restart unless-stopped "$ECR_REGISTRY/auth:latest"
        docker run -d --name employees  --network appnet --restart unless-stopped "$ECR_REGISTRY/employees:latest"
        docker run -d --name attendance --network appnet --restart unless-stopped "$ECR_REGISTRY/attendance:latest"
        docker run -d --name payroll    --network appnet --restart unless-stopped "$ECR_REGISTRY/payroll:latest"
        docker run -d --name gateway    --network appnet -p 8000:8000 --restart unless-stopped "$ECR_REGISTRY/gateway:latest"

        echo "✅ Deployment completed successfully!"
        EOF

    